<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>resource</name>
    <filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
    <fileName>${ClassName}Resource.java</fileName>
    <content><![CDATA[
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import com.albedo.java.common.security.SecurityUtil;
import ${packageName}.${moduleName}.domain<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import com.albedo.java.util.JsonUtil;
import com.albedo.java.util.PublicUtil;
import com.albedo.java.util.StringUtil;
import com.albedo.java.util.domain.Globals;
import com.albedo.java.util.domain.PageModel;
import com.albedo.java.util.exception.RuntimeMsgException;
import com.albedo.java.vo.sys.query.TreeQuery;
import com.albedo.java.web.rest.ResultBuilder;
import com.albedo.java.web.rest.base.DataResource;
import com.alibaba.fastjson.JSON;
import com.codahale.metrics.annotation.Timed;
import com.google.common.collect.Lists;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.util.List;
import java.util.Map;


/**
 * ${functionName}Controller ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${albedo.adminPath}"}/${urlPrefix}")
public class ${ClassName}Resource extends DataResource<${ClassName}> {
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required = false) String id) throws Exception {
		String path = request.getRequestURI();
		if (path!=null && !path.contains("checkBy") && !path.contains("find") && PublicUtil.isNotEmpty(id)) {
			return service.findOne(id);
		} else {
			return new ${ClassName}();
		}
	}
	@RequestMapping(value = "findTreeData", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public void findTreeData(TreeQuery treeQuery, HttpServletResponse response) {
		String rs = service.findTreeData(treeQuery);
		writeJsonHttpResponse(rs, response);
	}
	@RequestMapping(value = "/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public String list() {
		return "${lastPackageName}/${viewPrefix}List";
	}

	/**
	 * GET / : get all ${className}.
	 * 
	 * @param pageable
	 *            the pagination information
	 * @return the ResponseEntity with status 200 (OK) and with body all ${className}
	 * @throws URISyntaxException
	 *             if the pagination headers couldn't be generated
	 */
	@RequestMapping(value = "/page", method = RequestMethod.GET)
	public void getPage(PageModel<${ClassName}> pm, HttpServletResponse response) {
	    service.findPage(pm, SecurityUtil.dataScopeFilter());
		JSON rs = JsonUtil.getInstance().setRecurrenceStr(<#assign firstListField = true><#list table.columnList as column><#if column.simpleJavaType == "User" || column.simpleJavaType == "Org" || column.simpleJavaType == "Area"><#if !firstListField>, </#if>"<#if column.name == 'created_by'>creator<#elseif column.name == 'last_modified_by'>modifier<#else>${column.simpleJavaField}</#if>_${column.defaultJavaFieldName}"<#assign firstListField = false></#if></#list>).toJsonObject(pm);
		return ResultBuilder.buildObject(rs);
	}

	@RequestMapping(value = "/edit", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public String form(${ClassName} ${className}, Model model) {
		if(${className}==null){
			throw new RuntimeMsgException("无法获取${functionNameSimple}数据");
		}
		if (PublicUtil.isNotEmpty(${className}.getId())){
			${ClassName} item = service.findTopByParentId(${className}.getParentId());
			if (item!=null){
				${className}.setSort(${className}.getSort() + item.getSort());
			}
		}
		if (${className}.getSort() == null){
			${className}.setSort(30);
		}
		if(PublicUtil.isNotEmpty(${className}.getParentId())){
			${className}.setParent(service.findOne(${className}.getParentId()));
		}
		model.addAttribute("${className}", ${className});
		
		return "${lastPackageName}/${viewPrefix}Form";
	}

	/**
	 * POST / : Save a ${className}.
	 *
	 * @param request the HTTP request
	 */
	@RequestMapping(value = "/edit", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public void save(${ClassName} ${className}, Model model, HttpServletRequest request, HttpServletResponse response) {
		log.debug("REST request to save ${ClassName} : {}", ${className});
		<#assign firstListField = true><#list table.columnList as column>
			<#if column.unique && !column.pk>
		<#if firstListField><#assign firstListField = false>${ClassName} </#if>${className}Validate = new ${ClassName}(${className}.getId());
		${className}Validate.set${column.simpleJavaField?cap_first}(${className}.get${column.simpleJavaField?cap_first}());
		if (<#if column.nullable>PublicUtil.isNotEmpty(${className}.get${column.simpleJavaField?cap_first}()) && </#if>!checkByProperty(${className}Validate)) {
			throw new RuntimeMsgException(PublicUtil.toAppendStr("保存${functionNameSimple}'", ${className}.get${column.simpleJavaField?cap_first}(),"'失败，${column.comments }已存在"));
		}
			</#if>
		</#list>
		service.save(${className});

		addAjaxMsg(MSG_TYPE_SUCCESS, PublicUtil.toAppendStr("保存${functionNameSimple}成功"), response);
	}

	/**
	 * DELETE //:login : delete the "login" ${ClassName}.
	 *
	 * @param login
	 *            the login of the ${className} to delete
	 * @return the ResponseEntity with status 200 (OK)
	 */
	@RequestMapping(value = "/delete/{ids:" + Globals.LOGIN_REGEX
			+ "}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public void delete(@PathVariable String ids, HttpServletResponse response) {
		log.debug("REST request to delete ${ClassName}: {}", ids);
		service.delete(ids);
		addAjaxMsg(MSG_TYPE_SUCCESS, "删除${functionNameSimple}成功", response);
	}

	@RequestMapping(value = "/lock/{ids:" + Globals.LOGIN_REGEX
			+ "}", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public void lockOrUnLock(@PathVariable String ids, HttpServletResponse response) {
		log.debug("REST request to lockOrUnLock ${ClassName}: {}", ids);
		service.lockOrUnLock(ids);
		addAjaxMsg(MSG_TYPE_SUCCESS, "操作${functionNameSimple}成功", response);
	}

}]]>
    </content>
</template>