<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>viewFormComponentTs</name>
    <filePath>src/main/webapp/app/theme/pages/${lastPackageName}/${moduleName}/${subModuleName}</filePath>
    <fileName>${className}.from.component.ts</fileName>
    <content><![CDATA[
import { AfterViewInit, Component, OnDestroy, OnInit } from '@angular/core';
import { CTX } from "../../../../app.constants";
import { ActivatedRoute } from "@angular/router";
import { ${ClassName}Service } from "../../../../service/${urlPrefix}/${className}.service";
import { ${ClassName} } from "../../../../service/${urlPrefix}/${className}.model";

@Component({
    selector: ".${moduleName}-${className}-form.page-form",
    templateUrl: "./${className}.form.component.html"
})
export class ${ClassName}FormComponent implements AfterViewInit {

    ${className}: ${ClassName};
    routeData: any;
    ctx: any;
    id: any;

    private afterViewInit = false;
    private afterLoad = false;
    constructor(
        private activatedRoute: ActivatedRoute,
        private ${className}Service: ${ClassName}Service) {
        this.ctx = CTX;
        this.${className} = new ${ClassName}();
        this.routeData = this.activatedRoute.params.subscribe((params) => {
            this.id = params['id'];
            if (this.id) {
                this.${className}Service.find(this.id).subscribe((data) => {
                    this.${className} = data;
                    albedoForm.setData("#${className}-save-form", this.${className});
                    this.afterLoad = true;
                    this.initForm();
                });
            } else {
                this.afterLoad = true;
                this.initForm();
            }
        });
    }


    ngAfterViewInit() {
        this.afterViewInit = true;
        this.initForm();
    }

    initForm() {
        if (!this.afterViewInit || !this.afterLoad) return;

        var ${className}Id = this.${className}.id;
        albedoForm.initValidate($("#${className}-save-form"), {
            // define validation rules
            rules:{<#list table.columnList as column><#if column.unique && !column.pk>
				${column.simpleJavaField}: {remote: '<@jspEl/>{ctx}/${urlPrefix}/checkByProperty?id=' + encodeURIComponent(albedo.toStr($("#${className}-save-form").find("input[name='id']").val())}<#if column_has_next>,</#if></#if></#list>
			},
            messages:{<#list table.columnList as column><#if column.unique && !column.pk>
				${column.simpleJavaField}: {remote: '${column.comments }已存在'}<#if column_has_next>,</#if></#if></#list>
			}
        })
        albedoForm.init();
        albedoForm.initSave();

    }



}

]]>
    </content>
</template>
